//===-- MyArchInstructionSelector.cpp -----------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// MyArch.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "MyArchRegisterBankInfo.h"
#include "MyArchSubtarget.h"
#include "MyArchTargetMachine.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"
#include "llvm/IR/IntrinsicsMyArch.h"
#include "llvm/Support/Debug.h"

#define DEBUG_TYPE "myarch-isel"

using namespace llvm;

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "MyArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET

namespace {

class MyArchInstructionSelector : public InstructionSelector {
public:
  MyArchInstructionSelector(const MyArchTargetMachine &TM,
                           const MyArchSubtarget &STI,
                           const MyArchRegisterBankInfo &RBI);

  bool select(MachineInstr &I) override;
  static const char *getName() { return DEBUG_TYPE; }

private:
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;

  const MyArchSubtarget &STI;
  const MyArchInstrInfo &TII;
  const MyArchRegisterInfo &TRI;
  const MyArchRegisterBankInfo &RBI;

  // FIXME: This is necessary because DAGISel uses "Subtarget->" and GlobalISel
  // uses "STI." in the code generated by TableGen. We need to unify the name of
  // Subtarget variable.
  const MyArchSubtarget *Subtarget = &STI;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "MyArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "MyArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL
};

} // end anonymous namespace

#define GET_GLOBALISEL_IMPL
#include "MyArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

MyArchInstructionSelector::MyArchInstructionSelector(
    const MyArchTargetMachine &TM, const MyArchSubtarget &STI,
    const MyArchRegisterBankInfo &RBI)
    : InstructionSelector(), STI(STI), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "MyArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT
#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "MyArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool MyArchInstructionSelector::select(MachineInstr &I) {

  if (!isPreISelGenericOpcode(I.getOpcode())) {
    // Certain non-generic instructions also need some special handling.
    return true;
  }

  if (selectImpl(I, *CoverageInfo))
    return true;

  return false;
}

namespace llvm {
InstructionSelector *
createMyArchInstructionSelector(const MyArchTargetMachine &TM,
                               MyArchSubtarget &Subtarget,
                               MyArchRegisterBankInfo &RBI) {
  return new MyArchInstructionSelector(TM, Subtarget, RBI);
}
} // end namespace llvm
